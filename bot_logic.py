from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import (
    ContextTypes, ConversationHandler, MessageHandler, CommandHandler, filters
)
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from io import BytesIO
from datetime import datetime
import os
import sys

# === –°—Ç–µ–π—Ç—ã ===
NUM, DATE, FROM, TO, CAR, PLATE, ITEM_NAME, ITEM_UNIT, ITEM_QTY, ASK_MORE, EDIT_FIELD, EDIT_VALUE = range(12)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
FROM_LIST = [
    "–°–∫–ª–∞–¥ OOO SULTON-O'KTAM –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –û–±–ª–∞—Å—Ç—å",
    "–°–∫–ª–∞–¥ OOO SULTON-O'KTAM –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç"
]
TO_LIST = ["–°–∫–ª–∞–¥ –¢–µ–º–∏—Ä–π–æ–ª—Ç–∞–º–∏–Ω –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç",
           "–°–∫–ª–∞–¥ –¢–µ–º–∏—Ä–π–æ–ª–∏–Ω—Ñ—Ä–∞—Ç—É–∑–∏–ª–º–∞ –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç",
           "–°–∫–ª–∞–¥ OOO SULTON-O'KTAM –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –û–±–ª–∞—Å—Ç—å",
           "–°–∫–ª–∞–¥ OOO SULTON-O'KTAM –≥–æ—Ä–æ–¥ –¢–∞—à–∫–µ–Ω—Ç"]
ITEM_LIST = ["–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è 12V-264"
             "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è 4V-450"
             "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è 2V-850"
             "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è –ù–ö 1,2V-125"
             "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è –ù–ö 1,2V-180"
             "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è –ù–ö 1,2V-55"]
UNIT_LIST = ["—à—Ç", "–ª", "–∫–≥", "–∫–æ–º–ª–ø–µ–∫—Ç"]

# –ß–∞—Ç –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (ENV)
TARGET_CHAT_ID = int(os.environ.get("TARGET_CHAT_ID", "-1002589936295"))

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF ===
def generate_pdf(data):
    try:
        buffer = BytesIO()
        c = canvas.Canvas(buffer, pagesize=A4)
        width, height = A4

        font_path = os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf')
        pdfmetrics.registerFont(TTFont('DejaVu', font_path))

        c.setFont("DejaVu", 14)
        title_text = f"–ù–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ{data['num']} –æ—Ç {data['date']}"
        text_width = pdfmetrics.stringWidth(title_text, "DejaVu", 14)
        c.drawString((width - text_width) / 2, height - 50, title_text)

        c.setFont("DejaVu", 12)
        c.drawString(50, height - 90, f"–û—Ç–∫—É–¥–∞: {data['from']}")
        c.drawString(50, height - 110, f"–ö—É–¥–∞: {data['to']}")
        c.drawString(50, height - 130, f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {data['car']}")
        c.drawString(50, height - 150, f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {data['plate']}")

        c.setFont("DejaVu", 10)
        y = height - 180
        row_height = 20
        col_positions = [50, 75, 295, 365, 450]

        c.line(col_positions[0], y, col_positions[4], y)
        c.drawString(col_positions[0] + 2, y - 15, "‚Ññ")
        c.drawString(col_positions[1] + 2, y - 15, "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        c.drawString(col_positions[2] + 2, y - 15, "–ï–¥. –∏–∑–º.")
        c.drawString(col_positions[3] + 2, y - 15, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        y -= row_height
        c.line(col_positions[0], y, col_positions[4], y)

        for i, item in enumerate(data['items'], 1):
            c.drawString(col_positions[0] + 2, y - 15, str(i))
            c.drawString(col_positions[1] + 2, y - 15, item['name'])
            c.drawString(col_positions[2] + 2, y - 15, item['unit'])
            c.drawString(col_positions[3] + 2, y - 15, item['qty'])
            y -= row_height
            c.line(col_positions[0], y, col_positions[4], y)

        for x in col_positions:
            c.line(x, height - 180, x, y)

        y -= 40
        c.drawString(50, y, "–û—Ç–ø—É—Å—Ç–∏–ª ___________________________________________________________")
        y -= 30
        c.drawString(50, y, "–ü—Ä–∏–Ω—è–ª  ____________________________________________________________")

        c.save()
        buffer.seek(0)
        return buffer
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['items'] = []
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:", reply_markup=ReplyKeyboardRemove())
    return NUM

async def new_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['items'] = []
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:", reply_markup=ReplyKeyboardRemove())
    return NUM

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    sys.stdout.flush()
    sys.exit(0)

async def get_num(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['num'] = update.message.text
    today = datetime.now().strftime("%d.%m.%Y")
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, {today}):")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    keyboard = ReplyKeyboardMarkup([[loc] for loc in FROM_LIST], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–û—Ç–∫—É–¥–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é):", reply_markup=keyboard)
    return FROM

async def get_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['from'] = update.message.text
    keyboard = ReplyKeyboardMarkup([[loc] for loc in TO_LIST], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ö—É–¥–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é):", reply_markup=keyboard)
    return TO

async def get_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['to'] = update.message.text
    await update.message.reply_text("–ê–≤—Ç–æ–º–æ–±–∏–ª—å:", reply_markup=ReplyKeyboardRemove())
    return CAR

async def get_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['car'] = update.message.text
    await update.message.reply_text("–ì–æ—Å. –Ω–æ–º–µ—Ä:")
    return PLATE

async def get_plate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['plate'] = update.message.text
    keyboard = ReplyKeyboardMarkup([[name] for name in ITEM_LIST], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    return ITEM_NAME

async def get_item_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_item'] = {'name': update.message.text}
    keyboard = ReplyKeyboardMarkup([[u] for u in UNIT_LIST], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=keyboard)
    return ITEM_UNIT

async def get_item_unit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_item']['unit'] = update.message.text
    await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=ReplyKeyboardRemove())
    return ITEM_QTY

async def get_item_qty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_item']['qty'] = update.message.text
    context.user_data['items'].append(context.user_data['current_item'])

    item = context.user_data['current_item']
    summary = (
        f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä:\n"
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {item['name']}\n"
        f"–ï–¥. –∏–∑–º.: {item['unit']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['qty']}"
    )
    await update.message.reply_text(summary)

    keyboard = ReplyKeyboardMarkup([
        ["–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"],
        ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]
    ], resize_keyboard=True)

    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    return ASK_MORE

async def ask_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        keyboard = ReplyKeyboardMarkup([[name] for name in ITEM_LIST], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
        return ITEM_NAME
    elif choice == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        data = context.user_data
        item_lines = "\n".join([
            f"{i+1}. {item['name']} | {item['unit']} | {item['qty']}"
            for i, item in enumerate(data['items'])
        ])
        summary = (
            f"üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π:\n"
            f"–ù–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ{data['num']} –æ—Ç {data['date']}\n"
            f"–û—Ç–∫—É–¥–∞: {data['from']}\n"
            f"–ö—É–¥–∞: {data['to']}\n"
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {data['car']}\n"
            f"–ì–æ—Å. –Ω–æ–º–µ—Ä: {data['plate']}\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{item_lines}"
        )
        keyboard = ReplyKeyboardMarkup([
            ["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é"],
            ["–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]
        ], resize_keyboard=True)
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        await update.message.reply_text(summary, reply_markup=keyboard)
        return ASK_MORE
    elif choice == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        keyboard = ReplyKeyboardMarkup([
            ["‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π", "–î–∞—Ç–∞"],
            ["–û—Ç–∫—É–¥–∞", "–ö—É–¥–∞"],
            ["–ê–≤—Ç–æ–º–æ–±–∏–ª—å", "–ì–æ—Å. –Ω–æ–º–µ—Ä"],
            ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ï–¥. –∏–∑–º.", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        ], resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
        return EDIT_FIELD
    elif choice == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é":
        pdf = generate_pdf(context.user_data)
        if pdf:
            await update.message.reply_document(document=InputFile(pdf, filename="nakladnaya.pdf"))
            text = (
                f"üì§ –ù–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ{context.user_data['num']} –æ—Ç {context.user_data['date']}\n"
                f"–û—Ç–∫—É–¥–∞: {context.user_data['from']}\n"
                f"–ö—É–¥–∞: {context.user_data['to']}\n"
                f"–ê–≤—Ç–æ: {context.user_data['car']} | –ì–æ—Å. –Ω–æ–º–µ—Ä: {context.user_data['plate']}\n"
                + "\n".join([
                    f"{i+1}. {item['name']} ‚Äî {item['qty']} {item['unit']}"
                    for i, item in enumerate(context.user_data['items'])
                ])
            )
            await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=text)
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF.")
        keyboard = ReplyKeyboardMarkup([["–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é"]], resize_keyboard=True)
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é?", reply_markup=keyboard)
        return NUM
    elif choice == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–∫–ª–∞–¥–Ω—É—é":
        context.user_data.clear()
        context.user_data['items'] = []
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:", reply_markup=ReplyKeyboardRemove())
        return NUM
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return ASK_MORE

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = update.message.text
    context.user_data['edit_target'] = field
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field}", reply_markup=ReplyKeyboardRemove())
    return EDIT_VALUE

async def edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = context.user_data.get('edit_target')
    value = update.message.text
    mapping = {
        "‚Ññ –Ω–∞–∫–ª–∞–¥–Ω–æ–π": "num",
        "–î–∞—Ç–∞": "date",
        "–û—Ç–∫—É–¥–∞": "from",
        "–ö—É–¥–∞": "to",
        "–ê–≤—Ç–æ–º–æ–±–∏–ª—å": "car",
        "–ì–æ—Å. –Ω–æ–º–µ—Ä": "plate",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "name",
        "–ï–¥. –∏–∑–º.": "unit",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "qty"
    }
    if field in mapping:
        key = mapping[field]
        if key in ["name", "unit", "qty"] and context.user_data['items']:
            context.user_data['items'][-1][key] = value
        else:
            context.user_data[key] = value
    await update.message.reply_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup([
        ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]], resize_keyboard=True))
    return ASK_MORE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def register_handlers(app):
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("new", new_invoice),
            CommandHandler("restart", restart_bot)
        ],
        states={
            NUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_num)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_from)],
            TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_to)],
            CAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_car)],
            PLATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_plate)],
            ITEM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_item_name)],
            ITEM_UNIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_item_unit)],
            ITEM_QTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_item_qty)],
            ASK_MORE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_more)],
            EDIT_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_field)],
            EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_value)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv)